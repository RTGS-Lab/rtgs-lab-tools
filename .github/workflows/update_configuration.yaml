# .github/workflows/update-particle-configs.yaml
name: Update Particle Device Configurations

on:
  workflow_dispatch:
    inputs:
      update_note:
        description: 'Note on what this update is for'
        required: true
      config_file:
        description: 'Path to configuration file'
        required: true
        default: 'config.json'
      device_list_file:
        description: 'Path to device list file'
        required: true
        default: 'devices.txt'
      max_retries:
        description: 'Maximum retry attempts per device'
        required: false
        default: '3'
      restart_wait:
        description: 'Seconds to wait for device restart'
        required: false
        default: '30'
      online_timeout:
        description: 'Seconds to wait for device to come online'
        required: false
        default: '120'
      max_concurrent:
        description: 'Maximum concurrent devices to process'
        required: false
        default: '5'
      dry_run:
        description: 'Perform dry run (validate without changes)'
        type: boolean
        required: false
        default: false

jobs:
  update-configurations:
    name: Update Device Configurations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -e .

      - name: Configure git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Run configuration update script
        id: update
        env:
          PARTICLE_ACCESS_TOKEN: ${{ secrets.PARTICLE_ACCESS_TOKEN }}
          GITHUB_ACTIONS: 'true'
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          python -m rtgs_lab_tools.device_configuration.cli update-config \
            --config "src/rtgs_lab_tools/device_configuration/configurations/${{ github.event.inputs.config_file }}" \
            --devices "src/rtgs_lab_tools/device_configuration/devices/${{ github.event.inputs.device_list_file }}" \
            --output ./update_results.json \
            --max-retries ${{ github.event.inputs.max_retries }} \
            --restart-wait ${{ github.event.inputs.restart_wait }} \
            --online-timeout ${{ github.event.inputs.online_timeout }} \
            --max-concurrent ${{ github.event.inputs.max_concurrent }} \
            --note "${{ github.event.inputs.update_note }}" \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: configuration-update-results-${{ github.run_id }}
          path: |
            update_results.json
            particle_config_update.log
          retention-days: 120

      - name: Check results and set summary
        if: always()
        run: |
          if [ -f update_results.json ]; then
            TOTAL=$(python3 -c "import json; data=json.load(open('update_results.json')); print(data['summary']['total_devices'])")
            SUCCESSFUL=$(python3 -c "import json; data=json.load(open('update_results.json')); print(data['summary']['successful'])")
            FAILED=$(python3 -c "import json; data=json.load(open('update_results.json')); print(data['summary']['failed'])")
            
            echo "## Configuration Update Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Devices**: ${TOTAL}" >> $GITHUB_STEP_SUMMARY
            echo "- **Successful**: ${SUCCESSFUL}" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: ${FAILED}" >> $GITHUB_STEP_SUMMARY
            echo "- **Success Rate**: $(python3 -c "print(f'{${SUCCESSFUL}/${TOTAL}*100:.1f}%')")" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FAILED" -gt 0 ]; then
              echo "❌ Some devices failed to update"
              exit 1
            else
              echo "✅ All devices updated successfully"
            fi
          else
            echo "❌ No results file found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi